[sim_modular_input://Sample OS host input stream]
additional_meta_data_flag = 1
host = os
index = sim_metrics
interval = 300
metric_resolution = 300000
signal_flow_programs = "data('cpu.utilization', filter=(not filter('agent', '*'))).promote('host','host_kernel_name','host_linux_version','host_mem_total','host_cpu_cores', allow_missing=True).publish('DSIM:Hosts (Smart Agent/collectd)'); data('memory.free', filter=(not filter('agent', '*'))).sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)'); data('disk_ops.write', filter=(not filter('agent', '*'))).sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)'); data('if_errors.rx', rollup='rate').sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)'); data('if_errors.tx', rollup='rate').sum().promote('host',allow_missing=True).publish('DSIM:Hosts (Smart Agent/collectd)');"
sourcetype = stash
disabled = 0

[sim_modular_input://Sample AWS input stream]
additional_meta_data_flag = 1
host = aws
index = sim_metrics
interval = 300
metric_resolution = 300000
signal_flow_programs = "data('CPUUtilization', filter=filter('stat', 'mean') and filter('namespace', 'AWS/EC2') and filter('InstanceId', '*'), rollup='average').publish();" | "data('Duration', filter=filter('stat', 'sum') and filter('namespace', 'AWS/Lambda') and filter('Resource', '*'), rollup='sum').publish();" | "data('DBLoad', filter=filter('stat', 'mean') and filter('namespace', 'AWS/RDS')).publish();"
sourcetype = stash
disabled = 0

[sim_modular_input://Sample Azure input stream]
additional_meta_data_flag = 1
host = azure
index = sim_metrics
interval = 300
metric_resolution = 300000
signal_flow_programs = "data('Percentage CPU', filter=filter('primary_aggregation_type', 'true') and filter('aggregation_type', 'average'), rollup='average').promote('azure_resource_name').publish();" | "data('FunctionExecutionUnits', filter=filter('primary_aggregation_type', 'true') and filter('aggregation_type', 'total') and filter('is_Azure_Function', 'true'), rollup='sum').publish();"
sourcetype = stash
disabled = 0

[sim_modular_input://Sample GCP input stream]
additional_meta_data_flag = 1
host = gcp
index = sim_metrics
interval = 300
metric_resolution = 300000
signal_flow_programs = "data('instance/cpu/utilization', filter=filter('instance_id', '*'), rollup='average').publish();" | "data('function/execution_count', rollup='sum').publish();"
sourcetype = stash
disabled = 0
